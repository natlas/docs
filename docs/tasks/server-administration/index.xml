<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Natlas â€“ Server Administration</title><link>/docs/tasks/server-administration/</link><description>Recent content in Server Administration on Natlas</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 16 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="/docs/tasks/server-administration/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Managing Users</title><link>/docs/tasks/server-administration/managing-users/</link><pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate><guid>/docs/tasks/server-administration/managing-users/</guid><description>
&lt;h2 id="adding-your-first-user">Adding Your First User&lt;/h2>
&lt;p>Your first user is the most important for your Natlas server. You&amp;rsquo;ll want to create yourself an admin account so that you can manage your deployment. The first user must be &lt;a href="#inviting-by-cli">invited via cli&lt;/a>. All container references for CLI assume that your container is named &lt;code>natlas_server&lt;/code>.&lt;/p>
&lt;h2 id="inviting-new-users">Inviting New Users&lt;/h2>
&lt;h3 id="inviting-by-cli">Inviting by CLI&lt;/h3>
&lt;p>Inviting via CLI is pretty easy but has one small quirk - you have to ensure the &lt;code>SERVER_NAME&lt;/code> environment variable is set for your server so that invitation links can be generated correctly. If it&amp;rsquo;s not set, the command will fail.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker &lt;span style="color:#204a87">exec&lt;/span> -e &lt;span style="color:#000">SERVER_NAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>example.com -it natlas_server flask user new --admin
Accept invitation: http://example.com/auth/invite?token&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>this-is-an-invalid-example-token
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can then take this invitation into your browser and create your account.&lt;/p>
&lt;h3 id="inviting-by-web">Inviting by Web&lt;/h3>
&lt;p>If you already have an account, inviting a new user via the web interface is also very easy at &lt;code>/admin/users&lt;/code>. Simply add their email address in the text box and hit Invite User.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/y8a1AD4.png" alt="Invite Users">&lt;/p>
&lt;h2 id="promoting-a-user">Promoting A User&lt;/h2>
&lt;p>Promoting a user means to change their role from a normal user to an admin.&lt;/p>
&lt;h3 id="promoting-by-cli">Promoting by CLI&lt;/h3>
&lt;p>Promoting a user via CLI requires two things: Access to the docker container and the email address of the user you want to promote.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker &lt;span style="color:#204a87">exec&lt;/span> -it natlas_server flask user role --promote user@example.com
user@example.com is now an admin
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="promoting-by-web">Promoting by Web&lt;/h3>
&lt;p>Promoting a user on the web panel is super easy as long as you already have an admin account. Simply find their email address in the &lt;code>/admin/users&lt;/code> page and click the Promote button.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/1HRYXUW.png" alt="Promoting a user">&lt;/p></description></item><item><title>Docs: Managing Scope</title><link>/docs/tasks/server-administration/managing-scope/</link><pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate><guid>/docs/tasks/server-administration/managing-scope/</guid><description>
&lt;h2 id="importing-scope">Importing Scope&lt;/h2>
&lt;p>Before your Natlas deployment can do anything useful, you&amp;rsquo;ll need to import some scope addresses for your agents to scan. Natlas provides two paths for doing this: CLI and Web. The CLI demos in this documentation assumes that your natlas server container is named &lt;code>natlas_server&lt;/code>.&lt;/p>
&lt;h3 id="the-scope-file">The Scope File&lt;/h3>
&lt;p>Your scope file will be a csv file with each row representing one CIDR network, optionally followed by a list of comma-separated tags to describe that CIDR network. E.g.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">192.168.0.0/16,home,class-b
172.16.0.0/16,vpn,class-b
10.0.0.0/8,overlay,class-a,super cool network
192.168.0.100/32,pihole
192.168.100.1/32,modem
192.168.0.1/32,router
&lt;/code>&lt;/pre>&lt;/div>&lt;p>An observant reader will notice that the last 3 addresses all fall within the range of the first network. This is fine, more specific addresses will be tracked individually so that you can tag them with whatever you want. Just note that if you later choose to exclude the &lt;code>192.168.0.0/16&lt;/code> network, all addresses that fall inside that range will also be excluded, regardless if they are also individual items in the rest of the scope.&lt;/p>
&lt;h3 id="importing-by-cli">Importing by CLI&lt;/h3>
&lt;p>Importing via CLI is pretty straight forward but requires putting your scope file into the persistent mounted directory. Since the server requires this directory to store media files already, it shouldn&amp;rsquo;t be a big deal to drop your bootstrap scope into that directory. The data will be available in &lt;code>/data&lt;/code> inside the container.&lt;/p>
&lt;p>We put our scope file into our persistent storage directory and then we can import it with flask like so:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker &lt;span style="color:#204a87">exec&lt;/span> -it natlas_server flask scope import --verbose /data/myscopefile.txt &amp;gt; /data/import_results.json
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remember, the &lt;code>/data/myscopefile.txt&lt;/code> and &lt;code>/data/import_results.json&lt;/code> are relative to the docker container, not to the host filesystem.&lt;/p>
&lt;h3 id="importing-by-web">Importing by Web&lt;/h3>
&lt;p>Maybe manipulating the flask application through the docker layer is too verbose and you don&amp;rsquo;t want to do it. That&amp;rsquo;s fine and dandy, Natlas provides a web interface for admin users to import scope items individually or in bulk at the &lt;code>/admin/scope&lt;/code> url. The bulk import works the same way as the file import on CLI, except you paste the contents of the file rather than uploading the file itself.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/KWByFj5.png" alt="Scope Management Panel">&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ODGWNVB.png" alt="Scope Import">&lt;/p>
&lt;h2 id="exporting-scope">Exporting Scope&lt;/h2>
&lt;h3 id="exporting-by-cli">Exporting by CLI&lt;/h3>
&lt;p>The CLI claims to support exporting scope, however there is currently a bug (&lt;a href="https://github.com/natlas/natlas/issues/426">#246&lt;/a>) that prevents this from working correctly when your scope items are tagged.&lt;/p>
&lt;h3 id="exporting-by-web">Exporting by Web&lt;/h3>
&lt;p>As you can see above in the scope management panel, there&amp;rsquo;s a simple export button. You can also reach this directly by visiting &lt;code>/admin/export/scope&lt;/code> while logged in as an Admin. This produces a simple line-separated list of in-scope networks.&lt;/p>
&lt;h2 id="disabling-scope">Disabling Scope&lt;/h2>
&lt;p>Disabling scope is a way to remove specific addresses or subnets from being scanned. This can be important if you&amp;rsquo;re scanning things that are likely to tip over when being touched by nmap, or things that are deemed &amp;ldquo;too risky to scan.&amp;rdquo; You can easily add new network blocks to the exclusion list, or simply move existing network blocks.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/o7NGFHa.png" alt="Disabling existing scope">&lt;/p></description></item><item><title>Docs: Managing Agents</title><link>/docs/tasks/server-administration/managing-agents/</link><pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate><guid>/docs/tasks/server-administration/managing-agents/</guid><description>
&lt;h2 id="configuring-port-coverage">Configuring Port Coverage&lt;/h2>
&lt;p>Port coverage is configured via a server side &lt;a href="https://nmap.org/book/nmap-services.html">nmap-services&lt;/a> file, which is used by nmap to know what ports to scan. Natlas maintains it&amp;rsquo;s &lt;a href="https://github.com/natlas/natlas/blob/main/natlas-server/defaults/natlas-services">own version of this file&lt;/a>, which is shipped with the application. We use it to add new common or interesting ports that the default nmap-services doesn&amp;rsquo;t cover. You&amp;rsquo;re welcome to add or remove as many ports as you want from this file.&lt;/p>
&lt;p>To access this on your server, visit the &lt;code>/admin/services&lt;/code> endpoint while logged in with an admin account. It&amp;rsquo;ll look something like this:&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/I3UdVfJ.png" alt="Natlas Services Page">&lt;/p>
&lt;p>From here, you can add individual new services via the form, or you can upload a new services file to completely replace the current one.&lt;/p>
&lt;h2 id="configuring-scans">Configuring Scans&lt;/h2>
&lt;p>Everything about scans, except what ports are covered, can be found in the &lt;code>/admin/agents&lt;/code> url. This includes what nmap settings to use as well as whether or not you want them to collect screenshots of web services or vnc services.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/9G7UeZp.png" alt="Agent configuration page">&lt;/p>
&lt;h3 id="supported-nmap-options">Supported Nmap Options&lt;/h3>
&lt;p>Natlas doesn&amp;rsquo;t support raw nmap command editing, because it makes a goal to not allow arbitrary execution on the agents. As such, we currently only support a limited subset of nmap options. They are as follows:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://nmap.org/book/man-version-detection.html">Version Detection&lt;/a> (-sV)&lt;/li>
&lt;li>&lt;a href="https://nmap.org/book/man-os-detection.html">OS Detection&lt;/a> (-O)&lt;/li>
&lt;li>&lt;a href="https://nmap.org/book/man-os-detection.html">Limit OS Scan&lt;/a> (&amp;ndash;osscan-limit)&lt;/li>
&lt;li>&lt;a href="https://nmap.org/book/nse-usage.html">Enable Scripting Engine&lt;/a> (&amp;ndash;script)&lt;/li>
&lt;li>&lt;a href="https://nmap.org/book/man-output.html">Report Open Ports Only&lt;/a> (&amp;ndash;open)&lt;/li>
&lt;li>&lt;a href="https://nmap.org/book/man-host-discovery.html">Bypass Host Discovery&lt;/a> (-Pn)&lt;/li>
&lt;li>&lt;a href="https://nmap.org/book/scan-methods-udp-scan.html">Scan TCP+UDP&lt;/a> (-sUS) &lt;strong>Note:&lt;/strong> This requires your services file to have udp ports in it.&lt;/li>
&lt;/ul>
&lt;h3 id="nmap-scripts">Nmap Scripts&lt;/h3>
&lt;p>The list of scripts to scan is stored separately so that you can easily add and remove scripts. This field allows individual script names as well as script categories. Check out the &lt;a href="https://nmap.org/book/man-nse.html">nmap documentation&lt;/a> for more information about this, or checkout the &lt;a href="https://nmap.org/nsedoc/lib/nmap.html">NSE Library&lt;/a> for the list of scripts that are shipped with nmap.&lt;/p>
&lt;p>At this time, Natlas does not support sending custom scripts to the agents due to the security design of the agents. Custom NSE scripts effectively allows arbitrary lua execution on the agent, and we&amp;rsquo;re not trying to build a botnet. If you own all of the agents in your natlas deployment, you could manually distribute your custom scripts to the agents and then enable it in the server.&lt;/p>
&lt;p>&lt;strong>Important:&lt;/strong> If you specify a script that doesn&amp;rsquo;t exist, all of your scan data will start to automatically fail. The agent currently doesn&amp;rsquo;t maintain a list of scripts it knows about, nor does it parse the error output when nmap fails to initialize.&lt;/p>
&lt;h3 id="screenshots">Screenshots&lt;/h3>
&lt;p>Natlas currently supports screenshotting two service types: HTTP and VNC.&lt;/p>
&lt;h4 id="http-screenshots">HTTP Screenshots&lt;/h4>
&lt;p>Natlas uses aquatone for web screenshots, which automatically reads the output of the nmap file using aquatone&amp;rsquo;s &lt;code>-nmap&lt;/code> flag. This means that it will attempt to screenshot hostnames if available, and IP addresses otherwise. Natlas currently does not support any custom flags for aquatone. It only supports a process timeout value, which can be used to keep your agents from lingering too long on any given task. If the timeout value is reached, the process will be killed and the output will not be processed.&lt;/p>
&lt;h4 id="vnc-screenshots">VNC Screenshots&lt;/h4>
&lt;p>Natlas currently uses vncsnapshot for vnc screenshots, and only on port 5900. A future version will support VNC on arbitrary ports and will hopefully provide more control over the screenshots you get to take. Like HTTP Screenshots, VNC screenshots also only support a process timeout value, after which the process will be killed and the output abandoned.&lt;/p></description></item></channel></rss>